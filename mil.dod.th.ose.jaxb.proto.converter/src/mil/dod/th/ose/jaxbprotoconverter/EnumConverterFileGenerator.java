//==============================================================================
// This software is part of the Open Standard for Unattended Sensors (OSUS)
// reference implementation (OSUS-R).
//
// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along
// with this software. If not, see
// <http://creativecommons.org/publicdomain/zero/1.0/>.
//==============================================================================
package mil.dod.th.ose.jaxbprotoconverter;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import com.google.inject.Inject;

import mil.dod.th.ose.jaxbprotoconverter.proto.ProtoEnum;
import mil.dod.th.ose.jaxbprotoconverter.proto.ProtoModel;
import mil.dod.th.ose.utils.FileService;

/**
 * This class is capable of taking a {@link ProtoEnum} class and generating an enumeration converter source file.
 * 
 * @author dlandoll
 */
public class EnumConverterFileGenerator
{
    private final static String GEN_DATE_FORMAT = "MM/dd/yyyy HH:mm:ss\n";
    private final static String GEN_FILE_COMMENT = "//Generated By: JAXB to Proto Converter on ";
    private final static String PACKAGE_SEPARATOR = ".";

    /**
     * List of enumeration converters used to generate a single wrapper class for all of them.
     */
    private List<EnumConverterInfo> m_EnumConverters = new ArrayList<>();
    
    /**
     * File service used to handle file operations.
     */
    private FileService m_FileService;
    
    /**
     * Base constructor.
     * 
     * @param fileService
     *      File service used to handle file operations.
     */
    @Inject
    public EnumConverterFileGenerator(final FileService fileService)
    {
        m_FileService = fileService;
    }

    /**
     * Method that generates and enumeration converter based the enumerations contained within the specified 
     * {@link ProtoModel}.
     * 
     * @param protoModel
     *      The model that contains information about the enumeration that should have converters generated.
     * @param outputDir
     *      The directory where the converters should be generated.
     * @param xsdFilesDir
     *      Base directory in which all XSD schema files are located.
     * @param wrapperClassName
     *      Name to be used for the Java that can be used to convert between Java and proto enumeration
     *      values for all generated protocol buffer enumerations.
     * @param baseProtoPackage
     *      The base Java package for compiled proto files.
     * @param enumConvertersPackageName
     *      Java package name to be used for the generated converter classes.
     * @throws FileNotFoundException
     *      Thrown if a generated converter file cannot be found.
     */
    public void generateEnumConverters(final ProtoModel protoModel, final File outputDir, final File xsdFilesDir,
            final String wrapperClassName, final String baseProtoPackage, final String enumConvertersPackageName) 
                    throws FileNotFoundException
    {
        final Set<ProtoEnum> enumSet = protoModel.getEnums();
        for (ProtoEnum protoEnum: enumSet)
        {
            final File converterFile = new File(outputDir, protoEnum.getType().getSimpleName() + "Converter.java");
            final PrintStream outStream = new PrintStream(m_FileService.createFileOutputStream(converterFile));
            final File xsdFile = protoEnum.getProtoMessage().getProtoFile().getXsdFile();
            final String protoClassName = xsdFile.getName().replace(".xsd", "Gen");
            
            final Path relativePath = PathUtils.getRelativePath(xsdFile.getParentFile(), xsdFilesDir);
            final String protoPackageName = baseProtoPackage + PACKAGE_SEPARATOR 
                    + relativePath.toString().replace(File.separator, PACKAGE_SEPARATOR);
            genEnumConverterFile(protoEnum, outStream, protoClassName, protoPackageName, enumConvertersPackageName);
        }
        
        final File mainConverter = new File(outputDir, wrapperClassName + ".java");
        final PrintStream mainConverterOutStream = new PrintStream(m_FileService.createFileOutputStream(mainConverter));
        genEnumConverterWrapperFile(mainConverterOutStream, wrapperClassName, enumConvertersPackageName);
    }
    
    /**
     * Generates an enumeration converter source file for the given {@link ProtoEnum}.
     * 
     * @param enumeration
     *      proto enumeration
     * @param outStream
     *      source file output stream
     * @param protoClassName
     *      name of the associated proto class
     * @param protoPackageName
     *      Java package name of the associated proto class
     * @param enumConvertersPackageName
     *      Java package name for the enumeration converters
     */
    public void genEnumConverterFile(final ProtoEnum enumeration, final PrintStream outStream,
        final String protoClassName, final String protoPackageName, final String enumConvertersPackageName)
    {
        final String converterClassName = String.format("%sConverter", enumeration.getType().getSimpleName());

        final String enumClassName = String.format("%s.%s.%s", protoPackageName, protoClassName, 
                enumeration.getType().getSimpleName().replace(ProtoEnum.ENUM, PACKAGE_SEPARATOR) 
                + enumeration.getName());

        // Store converter info to generate wrapper later
        final EnumConverterInfo converterInfo = new EnumConverterInfo(
            enumConvertersPackageName, converterClassName, enumeration.getType().getName(), enumClassName);
        m_EnumConverters.add(converterInfo);

        final DateFormat dateFormat = new SimpleDateFormat(GEN_DATE_FORMAT);
        final long currentDate = new Date().getTime();
        outStream.println(GEN_FILE_COMMENT + dateFormat.format(currentDate));
        outStream.format("package %s;%n%n", enumConvertersPackageName); // NOCHECKSTYLE: Duplicate string is more readable
        outStream.println("import com.google.common.collect.BiMap;");
        outStream.println("import com.google.common.collect.ImmutableBiMap;");
        outStream.println();

        // Class Definition
        outStream.format("public final class %s {%n", converterClassName);

        // Map Definition
        outStream.format("    private static final BiMap<%s, %s> VALUE_MAP =%n",
                enumeration.getType().getName(), enumClassName);
        outStream.format("        ImmutableBiMap.<%s, %s>builder()%n",
                enumeration.getType().getName(), enumClassName);
        for (Object value : enumeration.getType().getEnumConstants())
        {
            outStream.format("       .put(%s.%s, %s.%s)%n",
                    enumeration.getType().getName(), value, enumClassName, value);
        }
        outStream.println("       .build();");
        outStream.println();

        // Method Definitions
        outStream.format("    public static %s convertJava%sToProto(%s value) {%n", enumClassName,
                enumeration.getName(), enumeration.getType().getName());
        outStream.println("        if (VALUE_MAP.containsKey(value)) {");
        outStream.println("            return VALUE_MAP.get(value);");
        outStream.println("        }"); // NOCHECKSTYLE: Duplicate string is more readable
        outStream.println(
            "        throw new IllegalArgumentException(String.format(\"Invalid java enum specified: %s\", value));");
        outStream.println("    }"); // NOCHECKSTYLE: Duplicate string is more readable
        outStream.println();

        outStream.format("    public static %s convertProto%sToJava(%s value) {%n",
                enumeration.getType().getName(), enumeration.getName(), enumClassName);
        outStream.println("        if (VALUE_MAP.containsValue(value)) {");
        outStream.println("            return VALUE_MAP.inverse().get(value);");
        outStream.println("        }");
        outStream.println(
            "        throw new IllegalArgumentException(String.format(\"Invalid proto enum specified: %s\", value));");
        outStream.println("    }");

        outStream.println("}"); // NOCHECKSTYLE: Duplicate string is more readable
    }

    /**
     * Generates an enumeration converter wrapper class that can be used to convert between Java and proto enumeration
     * values for all generated protocol buffer enumerations.
     * 
     * @param outStream
     *      source file output stream
     * @param className
     *      wrapper class name
     * @param packageName
     *      package name containing the wrapper class
     */
    public void genEnumConverterWrapperFile(final PrintStream outStream, final String className,
        final String packageName)
    {
        final DateFormat dateFormat = new SimpleDateFormat(GEN_DATE_FORMAT);
        final long currentDate = new Date().getTime();
        outStream.println(GEN_FILE_COMMENT + dateFormat.format(currentDate));
        outStream.format("package %s;%n%n", packageName);

        outStream.println("import com.google.protobuf.DescriptorProtos.FileOptions;");
        outStream.println("import com.google.protobuf.Descriptors.EnumValueDescriptor;");
        outStream.println("import com.google.protobuf.ProtocolMessageEnum;");
        outStream.println();

        // Import statements for enumeration converter classes
        for (EnumConverterInfo info : m_EnumConverters)
        {
            if (!packageName.equals(info.getEnumConverterPackageName()))
            {
                outStream.format("import %s.%s;%n", info.getEnumConverterPackageName(),
                    info.getEnumConverterClassName());
            }
        }

        outStream.println();

        // Class Definition
        outStream.format("public class %s {%n", className);

        // Method Definitions
        final String javaToProtoError = "String.format(\"Unknown java enum specified: %s\", javaValue)";
        final String protoToJavaError = "String.format(\"Unknown proto enum specified: %s\", protoValue)";
        final String protoDescToJavaError =
             "String.format(\"Unknown proto enum descriptor specified: %s\", protoValueDesc)";
        outStream.println("    public static ProtocolMessageEnum convertJavaEnumToProto(Enum<?> javaValue) {");
        outStream.println("        switch (javaValue.getClass().getName()) {");

        for (EnumConverterInfo info : m_EnumConverters)
        {
            outStream.format("            case \"%s\":%n", info.getJavaEnumName()); // NOCHECKSTYLE: Duplicate string is more readable
            outStream.format("                return %s.convertJavaEnumToProto((%s)javaValue);%n",
                info.getEnumConverterClassName(), info.getJavaEnumName());
        }

        outStream.println("            default:"); // NOCHECKSTYLE: Duplicate string is more readable
        outStream.format("                throw new IllegalArgumentException(%s);%n", javaToProtoError); // NOCHECKSTYLE: Duplicate string is more readable
        outStream.println("        }");
        outStream.println("    }");
        outStream.println();

        outStream.println("    public static Enum<?> convertProtoEnumToJava(ProtocolMessageEnum protoValue) {");
        outStream.println("        switch (protoValue.getClass().getName()) {");

        for (EnumConverterInfo info : m_EnumConverters)
        {
            outStream.format("            case \"%s\":%n", info.getProtoEnumName());
            outStream.format("                return %s.convertProtoEnumToJava((%s)protoValue);%n",
                info.getEnumConverterClassName(), info.getProtoEnumName());
        }

        outStream.println("            default:");
        outStream.format("                throw new IllegalArgumentException(%s);%n", protoToJavaError);
        outStream.println("        }");
        outStream.println("    }");
        outStream.println();

        outStream.println("    public static Enum<?> convertProtoEnumToJava(EnumValueDescriptor protoValueDesc) {");
        outStream.println("        FileOptions fileOptions = protoValueDesc.getFile().getOptions();");
        outStream.println("        String className = fileOptions.getJavaPackage()");
        outStream.println("            + \".\" + fileOptions.getJavaOuterClassname()");
        outStream.println("            + \".\" + protoValueDesc.getType().getContainingType().getName()");
        outStream.println("            + \".\" + protoValueDesc.getType().getName();");
        outStream.println();

        outStream.println("        switch (className) {");

        for (EnumConverterInfo info : m_EnumConverters)
        {
            outStream.format("            case \"%s\":%n", info.getProtoEnumName());
            outStream.format("                return %s.convertProtoEnumToJava(%s.valueOf(protoValueDesc));%n",
                info.getEnumConverterClassName(), info.getProtoEnumName());
        }

        outStream.println("            default:");
        outStream.format("                throw new IllegalArgumentException(%s);%n", protoDescToJavaError);
        outStream.println("        }");
        outStream.println("    }");

        outStream.println("}");
    }

    /**
     * Info class used to keep track of all generated enumeration converters. 
     */
    private class EnumConverterInfo
    {
        private String m_EnumConverterPackageName;
        private String m_EnumConverterClassName;
        private String m_JavaEnumName;
        private String m_ProtoEnumName;

        /**
         * Creates a new enumeration converter info instance.
         * 
         * @param enumConverterPackageName
         *      package name for the associated enumeration converter
         * @param enumConverterClassName
         *      class name of the associated enumeration converter
         * @param javaEnumName
         *      full class name of the associated Java enumeration
         * @param protoEnumName
         *      full class name of the associated proto enumeration
         */
        EnumConverterInfo(final String enumConverterPackageName, final String enumConverterClassName,
            final String javaEnumName, final String protoEnumName)
        {
            m_EnumConverterPackageName = enumConverterPackageName;
            m_EnumConverterClassName = enumConverterClassName;
            m_JavaEnumName = javaEnumName;
            m_ProtoEnumName = protoEnumName;
        }

        public String getEnumConverterPackageName()
        {
            return m_EnumConverterPackageName;
        }

        public String getEnumConverterClassName()
        {
            return m_EnumConverterClassName;
        }

        public String getJavaEnumName()
        {
            return m_JavaEnumName;
        }

        public String getProtoEnumName()
        {
            return m_ProtoEnumName;
        }
    }
}
