<!--
==============================================================================
 This software is part of the Open Standard for Unattended Sensors (OSUS)
 reference implementation (OSUS-R).

 To the extent possible under law, the author(s) have dedicated all copyright
 and related and neighboring rights to this software to the public domain
 worldwide. This software is distributed without any warranty.

 You should have received a copy of the CC0 Public Domain Dedication along
 with this software. If not, see
 <http://creativecommons.org/publicdomain/zero/1.0/>.
==============================================================================

 Component allows other components to be updated through push given an event.
 
==============================================================================
 -->  
<ui:composition 
    xmlns:composite="http://java.sun.com/jsf/composite"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:fn="http://java.sun.com/jsp/jstl/functions"
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:p="http://primefaces.org/ui">

    <composite:interface componentType="mil.dod.th.ose.gui.webapp.component.PushUpdateOutputText">
        <!-- The id of the component to update -->
        <composite:attribute name="for" required="true" />
        <!-- Topic identifying when this component should be updated. -->
        <composite:attribute name="pushTopic" required="true" />
        <!-- Unique id of the object to register a callback for. 
        UniqueId is not needed in cases where the componentId uniquely identifies the component to be updated 
        i.e. if there is only one instance of the component on the page. -->
        <composite:attribute name="uniqueId" />        
        <!-- Optional filter that further constrains when this component should be updated. This file value
             is expected to be related to the topic above and should be in the format <key>=<value>
             (e.g., controller.id=#{activeController.id}). -->
        <composite:attribute name="pushFilter" required="false" />        
        <!-- Property key which is used to pull the updated data value from the JS callback property map.
              (e.g. obs.count) -->
        <composite:attribute name="pushValueProp" required="true" />
       
        <!-- Callback function to register. Defaults to outputTextCallback -->
        <composite:attribute name="callback" default="outputTextCallback" />
        <!-- Filter function to determine if a callback should be removed or not.  -->
        <composite:attribute name="cleanupFilter"/>
        <!-- Topic to determine when to check callbacks for removal. -->
        <composite:attribute name="cleanupTopic"/>
    </composite:interface>

    <composite:implementation>
        <h:outputScript library="scripts/push/common" name="commonPushEventFunctions.js"/>
        <h:outputScript library="scripts/push/components" name="pushUpdateOutputText.js"/>
        <script type="text/javascript">
             regProp = { valueProp : "#{cc.attrs.pushValueProp}" };
             registerComponent("#{cc.forId}", #{cc.attrs.pushTopic}, "#{cc.attrs.uniqueId}", "#{cc.attrs.for}", "#{cc.attrs.pushFilter}", #{cc.attrs.callback}, regProp, #{cc.attrs.cleanupFilter}, #{cc.attrs.cleanupTopic});
        </script>
     </composite:implementation>
</ui:composition>