<?xml version="1.0" encoding="UTF-8"?>
<!--
==============================================================================
 This software is part of the Open Standard for Unattended Sensors (OSUS)
 reference implementation (OSUS-R).

 To the extent possible under law, the author(s) have dedicated all copyright
 and related and neighboring rights to this software to the public domain
 worldwide. This software is distributed without any warranty.

 You should have received a copy of the CC0 Public Domain Dedication along
 with this software. If not, see
 <http://creativecommons.org/publicdomain/zero/1.0/>.
==============================================================================
-->
<p:MissionProgramTemplate xmlns:p="http://th.dod.mil/core/mp/model" xmlns:shared="http://th.dod.mil/core/types" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://th.dod.mil/core/mp/model ../resources/missionProgramSchema/MissionProgramTemplate.xsd ">
  <p:source>
<![CDATA[importClass(java.lang.Runnable)
importPackage(java.util)
importPackage(java.util.concurrent)
importPackage(Packages.mil.dod.th.core.observation.types)
importClass(Packages.org.osgi.service.event.EventHandler);


//Variables
subscribeEvent;
triggerAssetA;
triggerAssetB;
captureAsset;

//
// Gets the correct time unit based on the string parameter passed in
// and converts the variable time to milliseconds 
// time - the string that indicates which time unit to return
// toConvert - long value passed in either milliseconds, seconds, minute, hours or days.
// returns a converted to milliseconds variable 
//
function getTimeInMs(time, toConvert)
{
    switch(time.toLowerCase())
    {
        case "millisecond":
            return toConvert;
        case "second":
            return TimeUnit.MILLISECONDS.convert(toConvert, TimeUnit.SECONDS); 
        case "minute":
            return TimeUnit.MILLISECONDS.convert(toConvert, TimeUnit.MINUTES);
        case "hours":
            return TimeUnit.MILLISECONDS.convert(toConvert, TimeUnit.HOURS);
        case "days":
            return TimeUnit.MILLISECONDS.convert(toConvert, TimeUnit.DAYS);
        default:
            throw "Invalid time unit value: " + time;
    }
};

executorService = mngExe.newCachedThreadPool();

//
// Function to determine which observation event to listen for
//
function subscribedEvent(theEvent) {
    switch (theEvent.toLowerCase()) {
        case "new":
            return "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_PERSISTED_WITH_OBS";
        case "updated":
            return "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_MERGED_WITH_OBS";
        case "both":
            return "both";
        default:
            throw "Invalid value for event type: " + theEvent;
    }
}

//
// Function used to perform observation queries
//
function doObsQuery(asset, startTime, stopTime) {
    if (useObservedTime)
    {
        return obsStr.newQuery().withAsset(asset).withTimeObservedRange(startTime, stopTime).execute();
    }
    else
    {
        return obsStr.newQuery().withAsset(asset).withTimeCreatedRange(startTime, stopTime).execute();
    }
}

obj = {
    execute: function () {
        if (useObservedTime)
        {
            timeDesc = "observed";
        }
        else
        {
            timeDesc = "created";
        }

        runnable = {
            run: function ()
            {
                //call capture data 
                currentTime = new java.util.Date();
                standOffTimeMilliseconds = getTimeInMs(timeUnitStr, standOffTime);
                cutOffTime = new java.util.Date(currentTime.getTime()-standOffTimeMilliseconds);
                pastObsCapture = doObsQuery(captureAsset, cutOffTime, currentTime);
                //Only capture asset aquires data if the time between two subsequent captures is greater than standoff.
                if (pastObsCapture.isEmpty())
                {
                    captureAsset.captureData();
                    logSvc.info("Capture Asset %s has been triggered because the delta time interval (%s) between both assets %s and  %s has been met", 
                                   [captureAsset.getName(), timeDesc, triggerAssetA.getName(), triggerAssetB.getName()]);
                }
                else
                {
                    logSvc.info("Capture Asset %s has not been triggered because the stand off time constraint (%s) between two subsequent captures has not been met", 
                                   [captureAsset.getName(), timeDesc]);
                }
            }
        }
        captureDataTask = new Runnable(runnable);
                    
        eventObj = {
            handleEvent: function (event) {
                observation = event.getProperty("observation");
                //get the time from the observation
                if (useObservedTime)
                {
                    obsTime = new java.util.Date(observation.getObservedTimestamp().longValue());
                }
                else
                {
                    obsTime = new java.util.Date(observation.getCreatedTimestamp().longValue());
                }
                deltaTimeBetweenTriggersMilliseconds = getTimeInMs(timeUnitStr, deltaTimeBetweenTriggers);
                startTime = new java.util.Date(obsTime.getTime()-deltaTimeBetweenTriggersMilliseconds);
                var observationAssetUuid = UUID.fromString(observation.getAssetUuid());
                switch(scenarioEvent)
                {
                    case "BothDirection":
                        if (observationAssetUuid.equals(triggerAssetB.getUuid()))
                        {
                            pastObs = doObsQuery(triggerAssetA, startTime, obsTime);
                        }        
                        if (observationAssetUuid.equals(triggerAssetA.getUuid()))
                        {
                            pastObs = doObsQuery(triggerAssetB, startTime, obsTime);
                        }
                        break;
                    case "AToB":
                        if (observationAssetUuid.equals(triggerAssetB.getUuid()))
                        {
                            pastObs = doObsQuery(triggerAssetA, startTime, obsTime);
                        }
                        else
                        {
                            pastObs = new ArrayList();
                        }
                        break;
                    case "BToA":
                        if (observationAssetUuid.equals(triggerAssetA.getUuid()))
                        {
                            pastObs = doObsQuery(triggerAssetB, startTime, obsTime);
                        }
                        else
                        {
                            pastObs = new ArrayList();
                        }
                        break;
                                
                }
                    if  (!(pastObs.isEmpty()))  
                    {
                        //initiate the captureData event on the captureAsset
                        logSvc.info("Capture Asset %s has been triggered because the delta time interval (%s) between both assets %s and  %s has been met", 
                                   [captureAsset.getName(), timeDesc, triggerAssetA.getName(), triggerAssetB.getName()]);

                        executorService.submit(captureDataTask);
                    }
                }
        };
        
        handler = new EventHandler(eventObj);
        

        //figure out what event to subscribe to
        topic = subscribedEvent(subscribeEvent);
  
        filter = "(|(obj.uuid=" + triggerAssetB.getUuid() + ")" + "(obj.uuid=" + triggerAssetA.getUuid() +  ")" + ")";
        
        if (topic == "both") {
            event1 = evtHndHlp.registerHandler(handler, 
                "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_PERSISTED_WITH_OBS", filter);
            event2 = evtHndHlp.registerHandler(handler, 
                "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_MERGED_WITH_OBS", filter);
        } else {
            event1 = evtHndHlp.registerHandler(handler, topic, filter);
        }
    },
    
    test: function()
    {
        triggerAssetA.captureData();
        triggerAssetB.captureData();
        captureAsset.captureData();
        return TestResult.class.static.PASSED;
    },
    shutdown: function()
    {
         evtHndHlp.unregisterHandler(event1);
         if (subscribeEvent == "both")
         {
            evtHndHlp.unregisterHandler(event2);
         }
    }
};
]]>
  </p:source>
  <p:name>triggered-data-capture-with-multiple-sensors</p:name>
  <p:description>This mission involves three assets. If the second asset is triggered within specified delta interval of time
   from the first trigger asset than the capture asset will capture data. The mission requires two trigger assets and a
   third capture asset to capture data. The specified delta time which is the interval between first trigger asset and 
   second trigger asset </p:description>
   
  <p:primaryImage encoding="image/png"></p:primaryImage>
   
  <p:withInterval>false</p:withInterval>
  <p:withImageCapture>false</p:withImageCapture>
  <p:withSensorTrigger>true</p:withSensorTrigger>
  <p:withTimerTrigger>false</p:withTimerTrigger>
  <p:withPanTilt>false</p:withPanTilt>

  <p:supportTestExecution>true</p:supportTestExecution>

  <p:variableMetaData>
    <shared:name>subscribeEvent</shared:name>
    <shared:defaultValue>Both</shared:defaultValue>
    <shared:optionValues>New</shared:optionValues>
    <shared:optionValues>Updated</shared:optionValues>
    <shared:optionValues>Both</shared:optionValues>
    <shared:description>Whether the trigger for the 'triggered asset' should be new observations or just updated observations from 
    the asset that is the trigger </shared:description>
    <shared:humanReadableName>Event trigger</shared:humanReadableName>
    <p:type>String</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>triggerAssetA</shared:name>
    <shared:description>The first asset that can be triggered</shared:description>
    <shared:humanReadableName>Trigger Asset</shared:humanReadableName>
    <p:type>Asset</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>triggerAssetB</shared:name>
    <shared:description>The additional asset which if triggered within delta time frame will trigger the capture asset to 
        capture data</shared:description>
    <shared:humanReadableName>Trigger Asset</shared:humanReadableName>
    <p:type>Asset</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>captureAsset</shared:name>
    <shared:description>The asset which will be triggered to capture data</shared:description>
    <shared:humanReadableName>Capture Asset</shared:humanReadableName>
    <p:type>Asset</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>deltaTimeBetweenTriggers</shared:name>
    <shared:defaultValue>5</shared:defaultValue>
    <shared:description>Represents the delta time between first asset and second asset </shared:description>
    <shared:humanReadableName>Delta Time Between Triggers</shared:humanReadableName>
    <p:type>Long</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>standOffTime</shared:name>
    <shared:defaultValue>3</shared:defaultValue>
    <shared:description>Represents the stand off time between the subsequent capture asset </shared:description>
    <shared:humanReadableName>Stand Off Time</shared:humanReadableName>
    <p:type>Long</p:type>
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>timeUnitStr</shared:name> 
    <shared:defaultValue>Second</shared:defaultValue>  
    <shared:optionValues>Millisecond</shared:optionValues>
    <shared:optionValues>Second</shared:optionValues>
    <shared:optionValues>Minute</shared:optionValues>
    <shared:optionValues>Hours</shared:optionValues>
    <shared:optionValues>Days</shared:optionValues>
    <shared:description>Unit of time in which all specified intervals are represented </shared:description>
    <shared:humanReadableName>Unit Of Time</shared:humanReadableName>
    <p:type>String</p:type> 
  </p:variableMetaData>
  
  <p:variableMetaData>
    <shared:name>scenarioEvent</shared:name>
    <shared:defaultValue>BothDirection</shared:defaultValue>
    <shared:optionValues>AToB</shared:optionValues>
    <shared:optionValues>BToA</shared:optionValues>
    <shared:optionValues>BothDirection</shared:optionValues>
    <shared:description>Desired order of triggering the sensors that will cause data to be captured.
    For example, if AToB, data capture will only be triggered if sensor A is followed by sensor B.
    If BToA, data capture will only be triggered if sensor B is followed by sensorA.
    If BothDirection, data capture can happen in both directions, sensor A followed by sensor B and vice versa. </shared:description>
    <shared:humanReadableName>Scenario Direction of Trigger</shared:humanReadableName>
    <p:type>String</p:type>
  </p:variableMetaData>

  <p:variableMetaData>
    <shared:name>useObservedTime</shared:name>
    <shared:defaultValue>false</shared:defaultValue>
    <shared:description>Specify if Stand Off Time and Delta Time Between Triggers should be based on when the sensors
    observe data or when observations are created. The observed time can only be used if all sensors support it. </shared:description>
    <shared:humanReadableName>Use Observed Time</shared:humanReadableName>
    <p:type>Boolean</p:type>
  </p:variableMetaData>
</p:MissionProgramTemplate>
