<?xml version="1.0" encoding="UTF-8"?>
<!--
==============================================================================
 This software is part of the Open Standard for Unattended Sensors (OSUS)
 reference implementation (OSUS-R).

 To the extent possible under law, the author(s) have dedicated all copyright
 and related and neighboring rights to this software to the public domain
 worldwide. This software is distributed without any warranty.

 You should have received a copy of the CC0 Public Domain Dedication along
 with this software. If not, see
 <http://creativecommons.org/publicdomain/zero/1.0/>.
==============================================================================
-->
<p:MissionProgramTemplate xmlns:p="http://th.dod.mil/core/mp/model" xmlns:shared="http://th.dod.mil/core/types" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://th.dod.mil/core/mp/model ../resources/missionProgramSchema/MissionProgramTemplate.xsd ">
  <p:source>
<![CDATA[importClass(java.lang.Runnable)
importPackage(Packages.mil.dod.th.core.asset.commands)
importPackage(Packages.mil.dod.th.core.types)
importPackage(Packages.mil.dod.th.core.types.factory)
importClass(Packages.org.osgi.service.event.EventHandler);

//Variables
subscribeEvent;
triggerAsset;
captureAsset;
pan;
tilt;

executorService = mngExe.newCachedThreadPool();

// Function to determine which observation event to listen for
//
function subscribedEvent(theEvent) {
    switch (theEvent.toLowerCase()) {
        case "new":
            return "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_PERSISTED_WITH_OBS";
        case "updated":
            return "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_MERGED_WITH_OBS";
        case "both":
            return "both";
        default:
            throw "Invalid value for event type: " + theEvent;
    }
}

obj = {
    execute: function () {

        runnable = {
            run: function () {
                //setting the pan tilt command.
                command = new SetPanTiltCommand().withPanTilt(SpatialTypesFactory.newOrientationOffset(pan, tilt));
                logSvc.info("The Asset %s has been directed to pan = %f and tilt = %f",
                             [captureAsset.getName(), pan, tilt]);
                response = captureAsset.executeCommand(command);
                if (response !== null)
                {
                    logSvc.info("Pan/Tilt has been successfully completed by the %s asset ", [captureAsset.getName()])
                    captureAsset.captureData();
                 }
            }
        }
        captureDataTask = new Runnable(runnable);

        eventObj = {
            handleEvent: function (event) {
                observation = event.getProperty("observation");

                //make sure that the observation has a detection and the asset name is the asset that
                //is the specified as the filtering asset
                if (observation.isSetDetection()) {
                    //initiate the captureData event on the captureAsset
                    logSvc.info("Asset %s has been triggered because event %s has occured for filter %s",
                                [captureAsset.getName(), subscribeEvent, triggerAsset.getName()]);

                    executorService.submit(captureDataTask);
                }
            }
        };

        handler = new EventHandler(eventObj);

        //figure out what event to subscribe to
        topic = subscribedEvent(subscribeEvent);

        filter = "(obj.uuid=" + triggerAsset.getUuid() + ")";
        if (topic == "both") {
            event1 = evtHndHlp.registerHandler(handler,
                "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_PERSISTED_WITH_OBS", filter);
            event2 = evtHndHlp.registerHandler(handler,
                "mil/dod/th/core/persistence/ObservationStore/OBSERVATION_MERGED_WITH_OBS", filter);
        } else {
            event1 = evtHndHlp.registerHandler(handler, topic, filter);
        }
    },

    test: function()
    {
        triggerAsset.captureData();
        command = new SetPanTiltCommand().withPanTilt(SpatialTypesFactory.newOrientationOffset(pan, tilt));
        captureAsset.executeCommand(command);
        captureAsset.captureData();
        return TestResult.class.static.PASSED;
    },
    shutdown: function()
    {
         evtHndHlp.unregisterHandler(event1);
         if (subscribeEvent == "both")
            evtHndHlp.unregisterHandler(event2);
    }
};
]]>
</p:source>
  <p:name>triggered-slew-data-capture</p:name>
  <p:description>
Mission is supposed to have one trigger sensor and one data capture asset to pan/tilt and then acquire data.
Once the trigger sensor is activated, mission will capture data from the data capture asset after it has
completed a pan and/or tilt. Mission would have parameters to set the capture asset's pan and tilt value.
The idea is that multiple missions could be setup to use a single data capture asset,
but multiple trigger sensors are set up with a different pan angle and tilt angle for same capture asset.</p:description>

  <p:primaryImage encoding="image/png"></p:primaryImage>

  <p:withInterval>false</p:withInterval>
  <p:withImageCapture>true</p:withImageCapture>
  <p:withSensorTrigger>true</p:withSensorTrigger>
  <p:withTimerTrigger>false</p:withTimerTrigger>
  <p:withPanTilt>true</p:withPanTilt>
  <p:supportTestExecution>true</p:supportTestExecution>

  <p:variableMetaData>
    <shared:name>subscribeEvent</shared:name>
    <shared:defaultValue>Both</shared:defaultValue>
    <shared:optionValues>New</shared:optionValues>
    <shared:optionValues>Updated</shared:optionValues>
    <shared:optionValues>Both</shared:optionValues>
    <shared:description>Whether the trigger for the 'triggered asset' should be new observations or just updated observations from
    the asset that is the trigger. </shared:description>
    <shared:humanReadableName>Event trigger</shared:humanReadableName>
    <p:type>String</p:type>
  </p:variableMetaData>

    <p:variableMetaData>
    <shared:name>triggerAsset</shared:name>
    <shared:description>The asset which will trigger the other asset to capture data.</shared:description>
    <shared:humanReadableName>Trigger Asset</shared:humanReadableName>
    <p:type>Asset</p:type>
  </p:variableMetaData>

  <p:variableMetaData>
    <shared:name>captureAsset</shared:name>
    <shared:description>The asset which will be triggered to capture data after it pan/tilts.</shared:description>
    <shared:humanReadableName>Capture Asset</shared:humanReadableName>
    <p:type>Asset</p:type>
  </p:variableMetaData>

  <p:variableMetaData>
    <shared:name>pan</shared:name>
    <shared:defaultValue>0</shared:defaultValue>
    <shared:minValue>-180.0</shared:minValue>
    <shared:maxValue>180.0</shared:maxValue>
    <shared:description>Pan upon the trigger asset and before the capture asset begins to acquire data.</shared:description>
    <shared:humanReadableName>Pan</shared:humanReadableName>
    <p:type>Float</p:type>
  </p:variableMetaData>

  <p:variableMetaData>
    <shared:name>tilt</shared:name>
    <shared:defaultValue>0</shared:defaultValue>
    <shared:minValue>-90.0</shared:minValue>
    <shared:maxValue>90.0</shared:maxValue>
    <shared:description>Tilt upon the trigger asset and before the capture asset begins to capture data.</shared:description>
    <shared:humanReadableName>Tilt</shared:humanReadableName>
    <p:type>Float</p:type>
  </p:variableMetaData>

</p:MissionProgramTemplate>
