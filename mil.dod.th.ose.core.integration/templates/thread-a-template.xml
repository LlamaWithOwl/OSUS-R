<?xml version="1.0" encoding="UTF-8"?>
<!--
==============================================================================
 This software is part of the Open Standard for Unattended Sensors (OSUS)
 reference implementation (OSUS-R).

 To the extent possible under law, the author(s) have dedicated all copyright
 and related and neighboring rights to this software to the public domain
 worldwide. This software is distributed without any warranty.

 You should have received a copy of the CC0 Public Domain Dedication along
 with this software. If not, see
 <http://creativecommons.org/publicdomain/zero/1.0/>.
==============================================================================
-->
<p:MissionProgramTemplate xmlns:p="http://th.dod.mil/core/mp/model" 
    xmlns:p1="http://th.dod.mil/core/types"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://th.dod.mil/core/mp/model ../resources/missionProgramSchema/MissionProgramTemplate.xsd ">
  <p:source>
  <![CDATA[obj = 
{
    execute: function()
    {
        // Main functionality
        importPackage(java.util.concurrent);
        importPackage(org.osgi.service.reference);

        //get the service reference of the SemaphoreService within the integration tests
        var ref = bndCnt.getServiceReference(semServiceRef);
        //request the actual service, by passing service ref
        var service2 = bndCnt.getService(ref);
        //get the two semaphores from within the service
        var semA = service2.getSemaphoreA();
        var semB = service2.getSemaphoreB();
        obj = 
        { 
            run : function () 
        { 
            semB.tryAcquire(5, java.util.concurrent.TimeUnit.SECONDS);

            x = 10;
        
            semA.release();
            semB.tryAcquire(5, java.util.concurrent.TimeUnit.SECONDS);
        
            if (x != 10)
            {
                throw Exception("Unxpected Value: " + x);
            }
        }
    }

    r = new java.lang.Runnable(obj);
    t = new java.lang.Thread(r);
    t.start();
    },
    test: function()
    {
        return TestResult.class.static.PASSED;
    },
    shutdown: function()
    {
        logSvc.info("Thread A script is shutting down!.", []);
    }
};]]>
</p:source>
  <p:name>thread-a-template</p:name>
  <p:description> Verifies that the managed executor service is able to STOP
 an executing script.  </p:description>

  <p:withInterval>false</p:withInterval>
  <p:withImageCapture>false</p:withImageCapture>
  <p:withSensorTrigger>false</p:withSensorTrigger>
  <p:withTimerTrigger>false</p:withTimerTrigger>
  <p:withPanTilt>false</p:withPanTilt>

  <p:supportTestExecution>true</p:supportTestExecution>
  
    <p:variableMetaData>
    <p1:name>semServiceRef</p1:name>
    <p1:description>The name of the semaphore service.</p1:description>
    <p1:humanReadableName>semaphore service</p1:humanReadableName>
    <p:type>String</p:type>
  </p:variableMetaData>
</p:MissionProgramTemplate>
